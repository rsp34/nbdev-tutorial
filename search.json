[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-tutorial",
    "section": "",
    "text": "Jeremy’s tutorial implements a deck of cards."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-tutorial",
    "section": "Install",
    "text": "Install\npip install nbdev_tutorial"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-tutorial",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Cardclass you can use to create, deploy and compare playing cards:\n\nCard(1,3)\n\n3D"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initially create a deck, all of the cards will be present.\n\ndeck = Deck()\ndeck\n\nAS; 2S; 3S; 4S; 5S; 6S; 7S; 8S; 9S; 10S; JS; QS; KS; AD; 2D; 3D; 4D; 5D; 6D; 7D; 8D; 9D; 10D; JD; QD; KD; AH; 2H; 3H; 4H; 5H; 6H; 7H; 8H; 9H; 10H; JH; QH; KH; AC; 2C; 3C; 4C; 5C; 6C; 7C; 8C; 9C; 10C; JC; QC; KC\n\n\nThere should be 52 cards.\n\ntest_eq(len(deck),52)\n\nAs a reminder, these are the suits we defined for a Card:\n\nsuits\n\n'SDHC'\n\n\nWe can check if, say, the Ace of Spades is in the deck\n\nCard(0,1) in deck\n\nTrue\n\n\n\nCard(1,1)\n\nAD\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(),Card(3,13))\n\nThere are 51 cards left in the deck now.\n\ntest_eq(len(deck),51)"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "ranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nFor instance the rank at index 1 (note that these isn’t a rank at position 0, since we want the rank to match the indices where possible)\n\nranks[1]\n\n'A'\n\n\nThe suits are:\n\nsuits\n\n'SDHC'\n\n\nFor instance the suit at index 0:\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\n\nc = Card(suit=1, rank=3)\nc\n\n3D\n\n\n\n\nComparison Operators\nEquality, less than and greater than work on the rank and suit indices:\nFor instance, here’s some tests for equality…\n\ntest_eq(Card(suit=1, rank=3),Card(suit=1, rank=3))\n\n…and a test of <…\n\nassert Card(suit=1, rank=3) < Card(suit=2, rank=3)\n\n… and finally of >\n\nassert Card(suit=3, rank=3) > Card(suit=2, rank=3)"
  }
]